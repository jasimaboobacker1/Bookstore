{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\MEARN PROJECT\\\\BookStore\\\\src\\\\Components\\\\Auth.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { registerAPI, loginAPI } from '../Services/allAPI';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Auth = ({\n  register\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [userData, setUserData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  });\n  const isRegisterForm = register ? true : false;\n  const [isAdmin, setIsAdmin] = useState(false); // State to track admin status\n\n  // ... existing functions ...\n\n  const handleLogin = async e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = userData;\n    try {\n      const result = await loginAPI(userData);\n      if (result.status === 200) {\n        const user = result.data.existingUser;\n        const isAdminUser = user.isAdmin || user.email === \"admin@gmail.com\" && user.password === \"admin123\";\n        if (isAdminUser) {\n          navigate('/adminhome');\n        } else {\n          sessionStorage.setItem(\"existingUser\", JSON.stringify(user));\n          sessionStorage.setItem(\"token\", result.data.token);\n          setUserData({\n            email: \"\",\n            password: \"\"\n          });\n\n          // Set the isAdmin state based on the user data\n          setIsAdmin(user.isAdmin);\n          navigate('/');\n          window.location.reload();\n        }\n      } else {\n        toast.warning(result.response.data);\n        console.log(result);\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      toast.error('Login failed. Please try again.');\n    }\n  };\n\n  // Determine whether to render the Header component based on admin status\n  const renderHeader = () => {\n    if (!isAdmin) {\n      return /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }, this);\n    }\n    return null; // Don't render the Header component for admins\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: renderHeader()\n  }, void 0, false);\n};\n_s(Auth, \"rfk7PSWJGO74sbxZ/fCjHgE3xC8=\", false, function () {\n  return [useNavigate];\n});\n_c = Auth;\nexport default Auth;\nvar _c;\n$RefreshReg$(_c, \"Auth\");","map":{"version":3,"names":["React","useState","Form","Link","ToastContainer","toast","registerAPI","loginAPI","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Auth","register","_s","navigate","userData","setUserData","username","email","password","isRegisterForm","isAdmin","setIsAdmin","handleLogin","e","preventDefault","result","status","user","data","existingUser","isAdminUser","sessionStorage","setItem","JSON","stringify","token","window","location","reload","warning","response","console","log","error","renderHeader","Header","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/MEARN PROJECT/BookStore/src/Components/Auth.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { registerAPI,loginAPI } from '../Services/allAPI';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst Auth = ({ register }) => {\r\n  const navigate = useNavigate();\r\n  const [userData, setUserData] = useState({\r\n    username: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const isRegisterForm = register ? true : false;\r\n  const [isAdmin, setIsAdmin] = useState(false); // State to track admin status\r\n\r\n  // ... existing functions ...\r\n\r\n  const handleLogin = async (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = userData;\r\n\r\n    try {\r\n      const result = await loginAPI(userData);\r\n\r\n      if (result.status === 200) {\r\n        const user = result.data.existingUser;\r\n        const isAdminUser = user.isAdmin || (user.email === \"admin@gmail.com\" && user.password === \"admin123\");\r\n\r\n        if (isAdminUser) {\r\n          navigate('/adminhome');\r\n        } else {\r\n          sessionStorage.setItem(\"existingUser\", JSON.stringify(user));\r\n          sessionStorage.setItem(\"token\", result.data.token);\r\n          setUserData({\r\n            email: \"\",\r\n            password: \"\",\r\n          });\r\n\r\n          // Set the isAdmin state based on the user data\r\n          setIsAdmin(user.isAdmin);\r\n\r\n          navigate('/');\r\n          window.location.reload();\r\n        }\r\n      } else {\r\n        toast.warning(result.response.data);\r\n        console.log(result);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      toast.error('Login failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Determine whether to render the Header component based on admin status\r\n  const renderHeader = () => {\r\n    if (!isAdmin) {\r\n      return <Header />;\r\n    }\r\n\r\n    return null; // Don't render the Header component for admins\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {renderHeader()}\r\n      {/* ... your existing JSX */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Auth;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}